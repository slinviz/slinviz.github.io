<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on Lin&#39;s Doc Site</title>
    <link>https://slinviz.github.io/pbasic/cn/</link>
    <description>Recent content in 计算机网络 on Lin&#39;s Doc Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://slinviz.github.io/pbasic/cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP协议</title>
      <link>https://slinviz.github.io/pbasic/cn/cn-tcp/</link>
      <pubDate>Sat, 27 Feb 2021 10:35:35 +0800</pubDate>
      
      <guid>https://slinviz.github.io/pbasic/cn/cn-tcp/</guid>
      <description>1. TCP 数据包 2. TCP 三次握手 3. TCP 四次挥手 4. TCP 如何保证传输可靠  4.1 ARQ 协议 4.2 滑动窗口和流量控制 4.3 拥塞控制  4.3.1 慢开始 4.3.2 拥塞控制 4.3.3 快重传和快恢复       1. TCP 数据包 TCP数据包主要由报头和数据（可选）组成，其报头长度在20B-60B，具体结构如下图：
2. TCP 三次握手 TCP连接需要进行三次握手的目的是建立可靠的通信通道，需要确认发送方和接收方的收发都是正常的。
 第一次握手：client什么都不能确认；server确认自己接收正常，client发送正常 第二次握手：client确认自己接收正常和发送正常，server接收正常和发送正常；server确认自己接收正常，client发送正常 第三次握手：client确认自己接收正常和发送正常，server接收正常和发送正常；server确认自己接收正常和发送正常，client接收正常和发送正常  3. TCP 四次挥手 TCP断开连接需要进行四次挥手，原因在于TCP建立的连接是双向通道，双方之间既可以向对方发送数据也可以接收对方发送的数据，相当于是建立了两条单向通道，当一方发起断开连接的请求并受到对方的确认后会进入半关闭状态，需要等到另一方发送完数据并发出释放连接的请求，释放请求确认后才能完全关闭TCP连接。
4. TCP 如何保证传输可靠  应用数据被分割成TCP认为最适合传输的数据块 TCP对发送的每一个数据包进行编号，接收方对收到的数据包进行排序，然后就有序的数据包交给应用层处理 校验和：TCP计算报头和数据的校验和，并将其放在报头中一起发送，接收方对收到的数据进行校验，如果校验出错则会丢弃这个数据包并不确认收到这个数据包 TCP接收端会丢弃重复的数据 流量控制：TCP使用大小可变的滑动窗口协议来进行流量控制，每一方都有固定大小的缓存空间，双方只接受缓存空间内容纳的数据。 拥塞控制机制：当网络拥塞时，减少数据发送 ARQ协议：每发送一个分组就停止发送，等待对方发送确认。收到确认后再发送下一个分组。 超时重传：TCP每个发送一个段就启动一个计时器，当超过时间未收到确认就重传该段。  4.1 ARQ 协议 自动重传请求通过确认和超时两个机制在不可靠服务的基础上实现可靠的信息传输。
  停止等待ARQ协议</description>
    </item>
    
    <item>
      <title>TCP与UDP协议的区别</title>
      <link>https://slinviz.github.io/pbasic/cn/cn-tcpudp/</link>
      <pubDate>Sat, 27 Feb 2021 10:21:24 +0800</pubDate>
      
      <guid>https://slinviz.github.io/pbasic/cn/cn-tcpudp/</guid>
      <description>1. TCP TCP提供面向连接的稳定可靠的服务。在数据传输之前需要先建立连接(三次握手)，数据传输结束后需要释放连接(四次挥手)，TCP不提供广播或多播服务。TCP的可靠体现在数据传输之前需要三次握手建立连接，在数据传输时有确认、窗口、重传、拥塞控制机制、在数据传输接收后经历四次挥手断开连接，释放资源。当难免增加开销，如确认、流量控制、计时器和连接管理等。TCP一般用于文件传输、收发邮件和远程登录等。
2. UDP UDP提供非连接的不可靠服务。UDP在传输数据之前不需要建立连接，远程主机在收到UDP报文后也不需要给出任何确认。虽然UDP不提供可靠交付，但是其在一些场景中是最有效的工作方式，一般用于及时通信，如QQ语音、QQ视频、直播等。
对比 </description>
    </item>
    
    <item>
      <title>OSI与TCP/IP架构</title>
      <link>https://slinviz.github.io/pbasic/cn/cn-arch/</link>
      <pubDate>Sat, 27 Feb 2021 09:05:55 +0800</pubDate>
      
      <guid>https://slinviz.github.io/pbasic/cn/cn-arch/</guid>
      <description>1. OSI网络7层模型 2. TCP/IP 4层模型 3. 5层模型   1. OSI网络7层模型 OSI计算机网络体系分为7层，从下往上分别为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层，每一层都定义了相互通信的协议。每个层只会处理与其相邻的上下层（如果有的话）的信息，包括从上往下封装需要发送的信息以及从下往上解封装收到的信息并交给上层处理。
  物理层
 主要定义物理设备标准，如网线的接口类型，光纤的接口类型。主要作用是传输比特率（数模转换/模数转换），这一层的数据称为比特。 工作设备是网线、集线器等。
   数据链路层
 对从网络层和物理层接收的数据进行MAC地址的封装与解封装。这一层的数据称为帧，工作设备是网桥、交换机等。
   网络层
 主要对数据进行IP地址的封装与解封装。这一层的数据称为报文（数据包），工作设备是路由器。
   传输层
 定义数据传输协议和端口，对数据进行分段传输和到达重组（目的地进行）。这一层的数据称为段。
   会话层
 通过传输层（端口号）建立数据传输通道。在计算机系统之间发起或接受会话请求。
   表示层
 主要对数据进行解释、加密与解密、压缩与解压缩等，把数据转换成人所能理解的，如图像、声音等。
   应用层
 主要是一些终端应用。如FTP、WEB等。
   网络模型与物理设备
实际上，OSI网络模型可以看做是从软件层面定义网络架构，而这是建立在各种物理设备之上的，如光纤、双绞线、集线器、交换机、网桥、路由器等。所谓的物理层和物理设备并不是一个层面上的概念。  2. TCP/IP 4层模型 TCP/IP协议不是TCP和IP这两个协议的总称，而是指因特网整个互联网协议。从下往上包括网络结构层、网络层、传输层和应用层。
  网络接口层
 指出主机必须通过某种协议与网络相连。</description>
    </item>
    
  </channel>
</rss>