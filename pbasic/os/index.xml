<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统OS on Lin&#39;s Doc Site</title>
    <link>https://slinviz.github.io/pbasic/os/</link>
    <description>Recent content in 操作系统OS on Lin&#39;s Doc Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://slinviz.github.io/pbasic/os/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>操作系统</title>
      <link>https://slinviz.github.io/pbasic/os/os/</link>
      <pubDate>Tue, 02 Mar 2021 08:44:01 +0800</pubDate>
      
      <guid>https://slinviz.github.io/pbasic/os/os/</guid>
      <description>1. 什么是操作系统？  操作系统是管理计算机硬件和软件资源的程序，是计算机的基石。 OS本质上是配置在计算机硬件上的第一层软件，用于管理计算机硬件和软件资源。 OS做为用户和计算机硬件系统之间的接口，屏蔽了硬件层的复杂性。操作系统就像是硬件使用的负责人，统筹着各种相关事项。 操作系统内核是操作系统的核心部分，它负责系统的内存管理，硬件设备管理，文件系统管理和应用程序管理。内核是连接应用程序和硬件之间的桥梁，决定着系统的性能和稳定性。  2. 什么是系统调用？ 根据进程访问资源的特点，可以将进程在系统上的运行分为两个级别：
 用户态：用户态运行的进程可以直接读取用户程序的数据 系统态：系统态运行的进程几乎可以访问计算机的任何资源，不受限制  一般情况下用户程序都是运行在用户态，当需要调用操作系统的系统态级别的子功能的时候就需要系统调用了。也就是说用户程序中凡是与系统态级别的资源的操作，如文件管理、进程控制、内存管理等，就需要通过系统调用的方式向操作系统提出服务请求，并由操作系统代为完成。
系统调用按功能大致可分为：
 设备管理：完成设备的请求或释放，以及设备的启动等功能。 文件管理：完成文件读、写、创建和删除等功能。 内存管理：完成内存的分配，回收，虚拟地址转换等功能。 进程控制：完成进程的创建，撤销，阻塞以及唤醒等功能。 进程通信：完成进程之间的消息传递或信号传递等功能。  </description>
    </item>
    
    <item>
      <title>进程和线程</title>
      <link>https://slinviz.github.io/pbasic/os/os-process/</link>
      <pubDate>Tue, 02 Mar 2021 08:36:34 +0800</pubDate>
      
      <guid>https://slinviz.github.io/pbasic/os/os-process/</guid>
      <description>1. 基本概念 2. 进程和线程的区别 3. 进程的状态 4. 进程间通信方式  4.1 管道/匿名管道 4.2 有名管道 4.3 信号 4.4 消息队列 4.5 信号量 4.6 共享内存 4.7 套接字   5. 线程间同步 6. 进程调度算法  6.1 先到先服务（FCFS）调度算法 6.2 短作业优先（SJF）调度算法 6.3 时间片轮转（RR）调度算法 6.4 多级反馈队列调度算法 6.5 优先级调度算法     1. 基本概念   进程（Process）
进程是一个动态的概念，通常指的是进程实体 = PCB + 程序段 + 数据段。PCB主要包括程序计数器，程序上下文，程序资源（文件、信号等）等。
  线程（Thread）
线程实际上是进程内部的一条执行序列（执行流），执行序列是指一组有序指令加数据的集合，执行序列是以函数为单位的。线程是一种轻量级的进程。线程一定是在进程内部进行活动的，并且每一个线程都拥有一个独立的计数器、进程栈和一组进程寄存器。强调一点，进程调度的对象是线程，而不是进程。
  协程（Coroutine） 协程是一种用户态的轻量级线程，调度由用户控制，拥有自己独立的寄存器上下文和栈。协程的切换效率比线程还要高，协程和线程的区别包括：
   线程是由CPU调度，而协程是由用户调度 线程存在安全问题，协程比线程较安全 线程使用同步机制，协程使用异步机制  管程（Monitor）</description>
    </item>
    
    <item>
      <title>文件管理</title>
      <link>https://slinviz.github.io/pbasic/os/os-fs/</link>
      <pubDate>Sat, 27 Feb 2021 12:14:50 +0800</pubDate>
      
      <guid>https://slinviz.github.io/pbasic/os/os-fs/</guid>
      <description>1. 文件和文件系统  1.1 文件层次关系  1.1.1 数据项 1.1.2 记录 1.1.3 文件   1.2 文件类型 1.3 文件系统模型 1.4 文件操作   2. 文件的逻辑结构  2.1 记录式文件  2.1.1 顺序文件 2.1.2 索引文件 2.1.3 索引顺序文件   2.2 直接文件和哈希文件  2.2.1 直接文件 2.2.2 哈希文件     3. 外存分配方式  3.1 连续分配方式 3.2 链接分配 3.3 索引分配  3.3.1 单级索引分配 3.3.2 多级索引分配 3.3.3 混合索引分配     4. 目录管理  4.</description>
    </item>
    
  </channel>
</rss>