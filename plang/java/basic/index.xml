<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java 基础 on Lin&#39;s Doc Site</title>
    <link>https://slinviz.github.io/plang/java/basic/</link>
    <description>Recent content in Java 基础 on Lin&#39;s Doc Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://slinviz.github.io/plang/java/basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>定义比较</title>
      <link>https://slinviz.github.io/plang/java/basic/compare/</link>
      <pubDate>Sat, 06 Mar 2021 15:15:47 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/java/basic/compare/</guid>
      <description>Comparable vs. Comparator     java.lang.Comparable java.util.Comparator     类型 接口 接口   使用时机 定义类时实现 类定义完成后，重新定义比较器   功能 实现类的 自然序 可定义多种比较方式   覆盖方法 public int compareTo(T o) public int compare(T o1, T o2)   实现次数 只能实现一次（类定义时） 可定义多个比较器类    Comparable 接口 java.lang.Comparable 在类定义的时候实现，可用于设定对象的默认排序（自然序），需要覆写public int compareTo(T o)方法。
import java.lang.Comparable; import java.util.Comparator; import java.util.List; import java.util.ArrayList; import java.util.Collections; public class Person implements Comparable&amp;lt;Person&amp;gt; { String name; int age; public Person(String name, int age){ super(); this.</description>
    </item>
    
    <item>
      <title>Object 类</title>
      <link>https://slinviz.github.io/plang/java/basic/object/</link>
      <pubDate>Mon, 01 Mar 2021 14:52:19 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/java/basic/object/</guid>
      <description>java.lang.Object 是Java类的最顶层，也是Java中唯一一个没有父类的类。其他的类要么显式的声明继承自其他类，要么隐式的继承Object类。  Java 中Object类不做为接口的父类。因为Java中的接口不能从java中的类继承，至少不能直接继承。 明确指明某个类继承自Object，即class SomeClass extends Object后，该类不能再继承其他类，Java仅支持单继承。   Object类中定义的方法如下：
  document.addEventListener(&#34;DOMContentLoaded&#34;, function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  classDiagram class Object{ +equales() boolean +hashCode() int +toString() String +getClass() Class~~ #finalize() void #clone() Object +notify() void +notifyAll() void +wait() void +wait(long timeout) void +wait(long timeout, int nanos) void }  equals与==  ==：作用是判断两个对象的地址是否相等，即这两个对象是否是同一个对象。对于基本类型，其比较的是值，对于对象比较的是地址。 equales方法：判断两个对象是否相等，有两种情况：  类没有覆写该方法，调用该方法时等价于使用== 类覆写了equales()方法，一般覆写后是判断两个对象的内容是否相等。    覆写equales()方法时一定要覆写hashCode()方法
hashCode() 方法返回该对象的哈希码给调用者。</description>
    </item>
    
    <item>
      <title>Java Error和Exception</title>
      <link>https://slinviz.github.io/plang/java/basic/exceptions/</link>
      <pubDate>Mon, 01 Mar 2021 13:30:04 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/java/basic/exceptions/</guid>
      <description>Java中如果某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。此时JVM会抛出一个封装了错误信息的对象，方法会立刻退出同时不返回任何值。
Java 中的“异常”可以分为Error（错误）和Exception（异常）两大类，它们都是Throwable的子类。其中：
 Error： Java运行时系统的内部错误或资源耗尽。当出现这样的错误，JVM会告知用户出现错误，并终止程序。 Exception： 异常可分为编译阶段的CheckedException和程序正常运行过程中抛出的RuntimeException两大类。  CheckedException：继承自java.lang.Exception类，一般是外部错误，发生在编译阶段，Java编译期会强制程序去捕获此类异常（要求使用try{}catch{}finally{}显式的去包裹可能出现这类异常的代码段）。 RuntimeException：运行时异常，如空指针，数组索引越界等，还有CheckedException，出现这类异常一定是程序错误。      document.addEventListener(&#34;DOMContentLoaded&#34;, function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  classDiagram class Object class Throwable class Error class Exception class RuntimeException Object 异常处理  throw 主动从方法中抛出异常交给上层调用处理。 throws 声明函数可能出现的异常。      throw throws     使用位置 方法内部 方法声明后   功能 抛出具体的异常对象，执行到throw方法调用接收，返回异常给上层调用 声明可能出现的异常，让调用者知道该方法可能出现的异常   是否处理异常 不处理，抛出异常给上层调用 不处理，指明可能出现的异常    使用对比：</description>
    </item>
    
  </channel>
</rss>