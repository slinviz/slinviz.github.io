<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Lin&#39;s Doc Site</title>
    <link>https://slinviz.github.io/plang/java/</link>
    <description>Recent content in Java on Lin&#39;s Doc Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://slinviz.github.io/plang/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM</title>
      <link>https://slinviz.github.io/plang/java/jvm/</link>
      <pubDate>Thu, 04 Mar 2021 14:23:35 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/java/jvm/</guid>
      <description>类加载机制 类加载过程  1. 加载 2. 验证 3. 准备 4. 解析 5. 初始化   类加载器  1. 类与类加载器 2. 双亲委派模型  双亲委派模型的工作过程   3. 破坏双亲委派模型   Reference   类加载机制  虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。
 类的生命周期包括：加载、验证、准备、解析、初始化、使用和卸载，其中验证、准备、和解析统称为连接。
加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的。解析阶段可以在初始化阶段之后（java运行时绑定），阶段间通常是相互交叉地混合式进行的。  必须立即对类进行初始化的5中情况：
 遇到new, getstatic, putstatic, invokestatic 这个4条字节码质量时，如果类没有进行过初始化，则需要先触发其初始化。即使用new关键字实例化对象、读取或者设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。 使用java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。 初始化一个类的时候，如果发现其父类还没进行过初始化，则需要先触发其父类的初始化。 当虚拟机启动时，用户指定要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类。 使用 JDK 1.7 动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。   对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。如下代码只会输出：SuperClass init!  class SuperClass { static { System.</description>
    </item>
    
  </channel>
</rss>