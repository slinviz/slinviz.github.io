<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Lin&#39;s Doc Site</title>
    <link>https://slinviz.github.io/plang/scala/</link>
    <description>Recent content in Scala on Lin&#39;s Doc Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://slinviz.github.io/plang/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trait</title>
      <link>https://slinviz.github.io/plang/scala/trait/</link>
      <pubDate>Mon, 08 Mar 2021 17:35:44 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/scala/trait/</guid>
      <description>Trait  Scala 中类可以实现任意数量的 Trait Trait 可以要求实现它们的类具有某些字段、方法或超类 Trait 可以提供方法和字段的实现 多个Trait叠加在一起时，顺序很重要——其方法先被执行的Trait排在更后面 Trait 中未实现的方法默认是 abstract 的 重写 Trait 中的抽象方法时无需 override 关键词 所有 Java 接口都可以当做 Scala 的 Trait 使用 构造单个对象时可以为其添加 Trait 和类一样，Trait 也可以有构造器：由字段初始化和其他 Trait 语句构成 Trait 不能有构造器参数，每个 Trait都有一个无参数的构造器  缺少构造器参数是 Trait 与类之间的唯一技术差别， 除此之外，Trait 可以具备类的所有特性，如具体的和抽象的字段，以及超类。
 Scala 需要将Trait翻译成 JVM 的类和接口  </description>
    </item>
    
    <item>
      <title>Scala 基本数据类型和流程控制</title>
      <link>https://slinviz.github.io/plang/scala/basic/</link>
      <pubDate>Wed, 03 Mar 2021 09:11:44 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/scala/basic/</guid>
      <description>Scala 基本数据类型   Scala 基本数据类型 Byte, Short, Int, Long, Float, Double, Char, Boolean, String, RichInt, RichDouble, StringOps
格式化字符串
printf(&amp;#34;Hello, %s! You are %d years old.%n&amp;#34;, name, age) print(f&amp;#34;Hello, ${name}! In six months, you&amp;#39;ll be ${age+0.5}%7.2f years old.%n&amp;#34;) print(s&amp;#34;$$$price&amp;#34;) println(raw&amp;#34;\n is a new line&amp;#34;) ; // \n is a new line  在 Scala 中，变量或函数的类型总是写在变量或函数名称的后面。 在 Scala 中， 仅当同一行代码中存在多条语句时才需要用分号;隔开。 Scala 中的操作符实际上是方法，Java中不能对操作符进行重载，但Scala允许定义操作符。   Scala中的类通常都有一个伴生对象，里面定义的方法类似于java中的静态方法。</description>
    </item>
    
    <item>
      <title>Mvn Repo Modify</title>
      <link>https://slinviz.github.io/plang/scala/mvn-repo/</link>
      <pubDate>Fri, 08 Jan 2021 14:37:20 +0800</pubDate>
      
      <guid>https://slinviz.github.io/plang/scala/mvn-repo/</guid>
      <description>可以直接修改${M2_HOME}/conf/settings.xml,也可以复制到${HOME}/.m2/,然后修改setting.xml文件.
${M2_HOME}/conf/setting.xml # 全局配置 ${user.home}/.m2/setting.xml # 用户配置 # 两个配置文件允许同时存在,同时存在时内容会被合并-用户配置优先 本地默认仓库 在setting.xml中找到localRepository选项,然后修改路径即可.
&amp;lt;!-- path to the local repository default ${user.home}/.m2/repository --&amp;gt; &amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;/localRepository&amp;gt; 远程仓库 修改远程仓库地址需要在mirrors中的mirror选项中进行配置.
&amp;lt;!-- &amp;lt;mirrors&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;mirrorId&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;repositoryId&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;Human readable name for this mirror&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://my.repository.com/repo/path&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;mirror&amp;gt; .... &amp;lt;/mirror&amp;gt; &amp;lt;/mirrors&amp;gt; --&amp;gt; &amp;lt;mirrors&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;/mirrors&amp;gt; </description>
    </item>
    
  </channel>
</rss>